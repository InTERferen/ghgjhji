#
#     d88P     d88P          888b    888          888
#      d88P   d88P           8888b   888          888
#       d88P d88P            88888b  888          888
#        d88888P    888888   888Y88b 888  .d88b.  888888
#        d88888P    888888   888 Y88b888 d8P  Y8b 888
#       d88P d88P            888  Y88888 88888888 888
#      d88P   d88P           888   Y8888 Y8b.     Y88b.
#     d88P     d88P          88.8    Y888  "Y8888   "Y888
#
#                      ¬© Copyright 2023
#                    https://x-net.pp.ua
#                 https://github.com/Conradk10
#
#                 Licensed under the GNU GPLv3
#          https://www.gnu.org/licenses/agpl-3.0.html
#

import re
import sys
import asyncio

from loguru import logger

from telethon.sync import TelegramClient
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.types import KeyboardButtonUrl, KeyboardButtonCallback

from config import (
    API_ID,
    API_HASH,
    DEVICE_MODEL,
    SYSTEM_VERSION,
    APP_VERSION,
    LANG_CODE,
    SYSTEM_LANG_CODE,
    URL,
    TEMP_DIR,
    PASSWORD,
    MAX_ATTEMPTS
)

from utils import get_sessions_list, parse_url, get_buttons_emoji


class Pattern:
    received = r'üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏|üí∞ You received'
    activated = r'–≠—Ç–æ—Ç –º—É–ª—å—Ç–∏-—á–µ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.|This multi-cheque already activated.'
    check_not_found = r'–ú—É–ª—å—Ç–∏-—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.|Multi-cheque not found.'
    activated_or_not_found = r'–≠—Ç–æ—Ç –º—É–ª—å—Ç–∏-—á–µ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.|This multi-cheque already activated.|' \
                             r'–ú—É–ª—å—Ç–∏-—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.|Multi-cheque not found.'
    check_activated = r'–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –º—É–ª—å—Ç–∏-—á–µ–∫.|You already activated this multi-cheque.'
    need_sub = r'–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π —á–µ–∫:|' \
               r'You need to subscribe to following resources to activate this cheque:'
    need_pass = r'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –º—É–ª—å—Ç–∏-—á–µ–∫–∞.|Enter password for multi-cheque.'
    need_premium = r'–≠—Ç–æ—Ç —á–µ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram Premium.|' \
                   r'This cheque only for users with Telegram Premium.'


async def main():
    sessions = get_sessions_list()
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(sessions)} —à—Ç.\n")
    logger.info(f"{', '.join(sessions)}")
    bot_url = parse_url(URL)
    logger.info(bot_url)
    if PASSWORD == "":
        logger.warning("–ü–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω, –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∏")
    for session in sessions:
        logger.info(f"–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é {session}")
        client = TelegramClient(
            session=session,
            api_id=API_ID,
            api_hash=API_HASH,
            device_model=DEVICE_MODEL,
            system_version=SYSTEM_VERSION,
            app_version=APP_VERSION,
            lang_code=LANG_CODE,
            system_lang_code=SYSTEM_LANG_CODE
        )
        await client.start()
        logger.info(f"{session}: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ!")
        try:
            async with client.conversation(bot_url['bot']) as conv:
                attemp = 0
                while attemp < MAX_ATTEMPTS:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
                    await conv.send_message(f'/{bot_url["command"]} {bot_url["args"]}')
                    message = await conv.get_response()
                    await asyncio.sleep(.5)
                    logger.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.message}')
                    # –ï—Å–ª–∏ —á–µ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if re.search(Pattern.activated_or_not_found, message.message):
                        logger.warning('–ß–µ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
                        sys.exit(0)
                    # –ï—Å–ª–∏ —á–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                    if re.search(Pattern.check_activated, message.message):
                        logger.warning('–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç —á–µ–∫')
                        break
                    # –ï—Å–ª–∏ —á–µ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º–æ–≤
                    if re.search(Pattern.need_premium, message.message):
                        logger.warning('–≠—Ç–æ—Ç —á–µ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram Premium')
                        break
                    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
                    if re.search(Pattern.need_sub, message.message):
                        i = 0
                        for _ in message.reply_markup.rows:
                            for button in message.reply_markup.rows[i].buttons:
                                if button.text.startswith('‚ùå') or button.text.startswith('üîé'):
                                    if isinstance(button, KeyboardButtonUrl):
                                        url = button.url
                                        if 't.me/joinchat/' in url:
                                            url = url.split('joinchat/')[1]
                                            await client(ImportChatInviteRequest(url))
                                        else:
                                            url = url.split('t.me/')[1]
                                            try:
                                                await client(JoinChannelRequest(url))
                                            except Exception as err:
                                                logger.error(err)
                                                logger.warning('–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª')
                                        logger.info(f'–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ: {url}')
                                        await asyncio.sleep(1)
                                    elif isinstance(button, KeyboardButtonCallback):
                                        await message.click(i)
                            i += 1
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞–ø—á—É
                    if message.photo:
                        await message.download_media(f"{TEMP_DIR}/original.jpg")
                        btns = []
                        i = 0
                        for _ in message.reply_markup.rows:
                            for button in message.reply_markup.rows[i].buttons:
                                btns.append(button.text)
                            i += 1
                        _emoji = get_buttons_emoji(btns)
                        await message.click(btns.index(_emoji))
                        message = await conv.get_response()
                        logger.info(f"–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É '{_emoji}'")
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
                    if re.search(Pattern.need_pass, message.message):
                        await conv.send_message(PASSWORD)
                        logger.info(f"–í–≤–µ–ª–∏ –ø–∞—Ä–æ–ª—å {PASSWORD}")
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
                    if re.search(Pattern.received, message.message):
                        logger.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.message}')
                        break
                    attemp += 1
                    if attemp >= 6:
                        logger.warning('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏')
                        break
        except Exception as err:
            logger.warning(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ({err})... –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏')
        logger.info(f"{session}: –û—Ç–∫–ª—é—á–∞–µ–º—Å—è...")
        await client.disconnect()
    logger.info("–°–µ—Å—Å–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç")


if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(main())
